{{- define "env" -}}
env:
- null
{{- range $name, $value := .service.environment | default list }}
{{- if ne ($value | toJson) "null" }}
{{- if typeIs "int" $name }}
{{- $value_parsed := regexSplit "=" $value 2 }}
{{- $name := first $value_parsed }}
{{- $value := last $value_parsed }}
- name: {{ $name | toJson }}
  value: {{ $value | replace "$$" "$" | toJson }}
{{- else }}
- name: {{ $name | toJson }}
  value: {{ $value | replace "$$" "$" | toJson }}
{{- end }}
{{- end }}
{{- end }}
{{- end -}}

{{- define "ports" -}}
ports:
- null
{{- range $portIndex, $port := .service.ports | default list }}
- name: {{ lower $port.protocol }}-{{ $port.target }}
  containerPort: {{ $port.target }}
  protocol: {{ upper $port.protocol }}
{{- end -}}
{{- end -}}

{{- define "volumes" -}}
volumes:
- null
{{- range $volume := .service.volumes | default list }}
- name: {{ $volume.source }}
  mountPath: {{ $volume.target }}
  subPath: data
{{- end }}
{{- if .service.shm_size }}
- name: shm
  mountPath: /dev/shm
{{- end }}
{{- end -}}

{{- define "template" -}}
metadata:
  labels:
    app.kubernetes.io/name: {{ .name }}
spec:
  containers:
  - name: {{ .name }}
    image: {{ .service.image | toJson }}
    imagePullPolicy: {{ .config.imagePullPolicy | default "Always" | toJson }}
    {{- if .service.command }}
    command: {{ list (index .service.command 0) | toJson }}
    args: {{ slice .service.command 1 | toJson }}
    {{- end }}
    {{- if .env }}
    env:
{{ toYaml .env | indent 8 }}
    {{- end }}
    {{- if .volumes }}
    volumeMounts:
{{ toYaml .volumes | indent 8 }}
    {{- end }}
    {{- if .ports }}
    ports:
{{ toYaml .ports | indent 8 }}
    {{- end }}
    {{- if (.service.deploy | default dict).resources }}
    resources:
      {{- if .service.deploy.resources.limits }}
      limits:
        {{- if .service.deploy.resources.limits.cpus }}
        cpu: {{ .service.deploy.resources.limits.cpus }}
        {{- end }}
        {{- if .service.deploy.resources.limits.memory }}
        memory: {{ div (div .service.deploy.resources.limits.memory 1024) 1024 }}Mi
        {{- end }}
      {{- end }}
      {{- if .service.deploy.resources.reservations }}
      requests:
        {{- if .service.deploy.resources.reservations.cpus }}
        cpu: {{ .service.deploy.resources.reservations.cpus }}
        {{- end }}
        {{- if .service.deploy.resources.reservations.memory }}
        memory: {{ div (div .service.deploy.resources.reservations.memory 1024) 1024 }}Mi
        {{- end }}
      {{- end }}
    {{- end }}
  dnsPolicy: {{ .config.dnsPolicy | default "ClusterFirst" }}
  restartPolicy: {{ .config.restartPolicy | default "Always" }}
  {{- if .volumes }}
  volumes:
  {{- range $vol := .service.volumes }}
  {{- $volName := index $vol "source" }}
  - name: {{ $volName }}
    persistentVolumeClaim:
      claimName: {{ $volName }}
  {{- end }}
  {{- if .service.shm_size }}
  - name: shm
    emptyDir:
      medium: Memory
      sizeLimit: {{ div (div .service.shm_size 1024) 1024 }}Mi
  {{- end }}
  {{- end }}
{{- end -}}

{{- range $name, $service := $.Values.services }}
{{- with dict "name" $name "service" $service }}
{{- $config := index .service "x-kubernetes" | default dict }}
{{- if not ($config.exclude | default false) }}
{{- $ports := slice (index ((include "ports" .) | fromYaml) "ports") 1 }}
{{- $env := slice (index ((include "env" .) | fromYaml) "env") 1 }}
{{- $volumes := slice (index ((include "volumes" .) | fromYaml) "volumes") 1 }}
{{ with merge . (dict "config" $config "ports" $ports "env" $env "volumes" $volumes) }}
---
{{- if eq ($config.cron | default "") "" }}
apiVersion: apps/v1
{{- if eq ((.service.deploy | default dict).mode | default "") "global" }}
kind: DaemonSet
{{- else }}
kind: Deployment
{{- end }}
metadata:
  {{- if $config.labels }}
  labels:
{{ toYaml $config.labels | indent 4 }}
  {{- end }}
  {{- if $config.annotations }}
  annotations:
{{ toYaml $config.annotations | indent 4 }}
  {{- end }}
  name: {{ $name }}
spec:
  replicas: {{ (.service.deploy | default dict).replicas | default 1 }}
  {{- if $config.strategy }}
  strategy:
{{ toYaml $config.strategy | indent 4 }}
  {{- end }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ $name }}
  template:
{{ toYaml ((include "template" .) | fromYaml) | indent 4 }}

{{- if $ports }}
---
apiVersion: v1
kind: Service
metadata:
  {{- if $config.labels }}
  labels:
{{ toYaml $config.labels | indent 4 }}
  {{- end }}
  {{- if $config.annotations }}
  annotations:
{{ toYaml $config.annotations | indent 4 }}
  {{- end }}
  name: {{ $name }}
spec:
  selector:
    app.kubernetes.io/name: {{ $name }}
  ports:
    {{- range $ports }}
    - name: {{ .name }}
      protocol: {{ .protocol }}
      port: {{ .containerPort }}
      targetPort: {{ .containerPort }}
    {{- end }}
{{- end }}

{{- else }}
apiVersion: batch/v1
kind: CronJob
metadata:
  {{- if $config.labels }}
  labels:
{{ toYaml $config.labels | indent 4 }}
  {{- end }}
  {{- if $config.annotations }}
  annotations:
{{ toYaml $config.annotations | indent 4 }}
  {{- end }}
  name: {{ $name }}
spec:
  schedule: {{ $config.cron }}
  jobTemplate:
    spec:
      template:
{{ toYaml ((include "template" .) | fromYaml) | indent 8 }}
{{- end }}
{{- end }}
{{- end }}
{{- end }}
{{- end }}

{{- if $.Values.volumes }}
{{- range $volName, $volSpec := $.Values.volumes }}
{{- $vol := $volSpec | default dict }}
{{- $config := index $vol "x-kubernetes" | default dict }}
{{- if not ($config.exclude | default false) }}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ $volName }}
spec:
  accessModes:
  - {{ $config.mode | default "ReadWriteOnce" | toJson }}
  resources:
    requests:
      storage: {{ $config.size | default "1Gi" | toJson }}
  storageClassName: {{ $config.class | default "" | toJson }}
  volumeMode: Filesystem
{{- end }}
{{- end }}
{{- end }}
